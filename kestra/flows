id: polish_flats_unified_loader
namespace: flats.project

description: |
  Load Polish flats data (rent or sale) from GitHub to Postgres safely.
  Handles table recreation, CSV import, and de-duplication.

inputs:
  - id: year
    type: STRING
    displayName: Year
    defaults: "2023"
  - id: month
    type: STRING
    displayName: Month (MM)
    defaults: "11"
  - id: data_type
    type: SELECT
    displayName: Rent or Sale
    values: [rent, sale]
    defaults: sale

variables:
  filename_prefix: "{{ inputs.data_type == 'rent' ? 'apartments_rent_pl' : 'apartments_pl' }}"
  filename: "{{ vars.filename_prefix }}_{{ inputs.year }}_{{ inputs.month }}.csv"
  table_name: "{{ inputs.data_type == 'rent' ? 'public.apartments_rent' : 'public.apartments_sale' }}"
  staging_table_name: "{{ vars.table_name }}_staging"
  data_url: "https://raw.githubusercontent.com/elgrassa/Data-engineering-professional-certificate/main/kestra/csv/{{ vars.filename }}"
  columns_list:
    - id
    - city
    - type
    - squaremeters
    - rooms
    - floor
    - floorcount
    - buildyear
    - latitude
    - longitude
    - centredistance
    - poicount
    - schooldistance
    - clinicdistance
    - postofficedistance
    - kindergartendistance
    - restaurantdistance
    - collegedistance
    - pharmacydistance
    - ownership
    - buildingmaterial
    - condition
    - hasparkingspace
    - hasbalcony
    - haselevator
    - hassecurity
    - hasstorageroom
    - price
  columns_types:
    id: TEXT
    city: TEXT
    type: TEXT
    squaremeters: DOUBLE PRECISION
    rooms: DOUBLE PRECISION
    floor: DOUBLE PRECISION
    floorcount: DOUBLE PRECISION
    buildyear: DOUBLE PRECISION
    latitude: DOUBLE PRECISION
    longitude: DOUBLE PRECISION
    centredistance: DOUBLE PRECISION
    poicount: DOUBLE PRECISION
    schooldistance: DOUBLE PRECISION
    clinicdistance: DOUBLE PRECISION
    postofficedistance: DOUBLE PRECISION
    kindergartendistance: DOUBLE PRECISION
    restaurantdistance: DOUBLE PRECISION
    collegedistance: DOUBLE PRECISION
    pharmacydistance: DOUBLE PRECISION
    ownership: TEXT
    buildingmaterial: TEXT
    condition: TEXT
    hasparkingspace: TEXT
    hasbalcony: TEXT
    haselevator: TEXT
    hassecurity: TEXT
    hasstorageroom: TEXT
    price: INTEGER

tasks:
  - id: set_labels
    type: io.kestra.plugin.core.execution.Labels
    labels:
      file: "{{ vars.filename }}"
      data_type: "{{ inputs.data_type }}"
      year: "{{ inputs.year }}"
      month: "{{ inputs.month }}"

  - id: download_csv
    type: io.kestra.plugin.scripts.shell.Commands
    outputFiles:
      - "{{ render(vars.filename) }}"
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    commands:
      - |
        echo "Downloading {{ render(vars.filename) }} from {{ render(vars.data_url) }}" &&
        wget -q -O "{{ render(vars.filename) }}" "{{ render(vars.data_url) }}"

  - id: recreate_staging_table
    type: io.kestra.plugin.jdbc.postgresql.Queries
    url: jdbc:postgresql://pgdatabase:5432/polish_flat
    username: root
    password: root
    sql: |
      DROP TABLE IF EXISTS {{ render(vars.staging_table_name) }};
      CREATE TABLE {{ render(vars.staging_table_name) }} (
      {% set types = vars.columns_types %}
      {% set cols = vars.columns_list %}
      {% for col in cols %}
        "{{ col }}" {{ types[col] }}{% if not loop.last %},{% endif %}
      {% endfor %}
      );

  - id: copy_to_staging
    type: io.kestra.plugin.jdbc.postgresql.CopyIn
    url: jdbc:postgresql://pgdatabase:5432/polish_flat
    username: root
    password: root
    format: CSV
    from: "{{ outputs.download_csv.outputFiles[render(vars.filename)] }}"
    table: "{{ render(vars.staging_table_name) }}"
    header: true
    columns: "{{ vars.columns_list }}"

  - id: deduplicate_in_staging
    type: io.kestra.plugin.jdbc.postgresql.Queries
    description: "Remove duplicates inside staging by keeping first id"
    url: jdbc:postgresql://pgdatabase:5432/polish_flat
    username: root
    password: root
    sql: |
      DELETE FROM {{ render(vars.staging_table_name) }}
      WHERE ctid NOT IN (
        SELECT MIN(ctid)
        FROM {{ render(vars.staging_table_name) }}
        GROUP BY id
      );

  - id: add_unique_id
    type: io.kestra.plugin.jdbc.postgresql.Queries
    description: "Add unique_row_id based on id, city, type, squareMeters"
    url: jdbc:postgresql://pgdatabase:5432/polish_flat
    username: root
    password: root
    sql: |
      ALTER TABLE {{ render(vars.staging_table_name) }}
      ADD COLUMN IF NOT EXISTS unique_row_id TEXT;

      UPDATE {{ render(vars.staging_table_name) }}
      SET unique_row_id = md5(
        COALESCE(id, '') ||
        COALESCE(city, '') ||
        COALESCE(type, '') ||
        COALESCE(CAST(squareMeters AS text), '')
      )
      WHERE unique_row_id IS NULL;
  - id: create_final_table_if_not_exists
    type: io.kestra.plugin.jdbc.postgresql.Queries
    description: "Ensure the final table exists before merging"
    url: jdbc:postgresql://pgdatabase:5432/polish_flat
    username: root
    password: root
    sql: |
      CREATE TABLE IF NOT EXISTS {{ render(vars.table_name) }} (
        id TEXT PRIMARY KEY,
        city TEXT,
        type TEXT,
        squareMeters DOUBLE PRECISION,
        rooms DOUBLE PRECISION,
        floor DOUBLE PRECISION,
        floorCount DOUBLE PRECISION,
        buildYear DOUBLE PRECISION,
        latitude DOUBLE PRECISION,
        longitude DOUBLE PRECISION,
        centreDistance DOUBLE PRECISION,
        poiCount DOUBLE PRECISION,
        schoolDistance DOUBLE PRECISION,
        clinicDistance DOUBLE PRECISION,
        postOfficeDistance DOUBLE PRECISION,
        kindergartenDistance DOUBLE PRECISION,
        restaurantDistance DOUBLE PRECISION,
        collegeDistance DOUBLE PRECISION,
        pharmacyDistance DOUBLE PRECISION,
        ownership TEXT,
        buildingMaterial TEXT,
        condition TEXT,
        hasParkingSpace TEXT,
        hasBalcony TEXT,
        hasElevator TEXT,
        hasSecurity TEXT,
        hasStorageRoom TEXT,
        price INTEGER,
        unique_row_id TEXT
      );

  - id: merge_to_final_table
    type: io.kestra.plugin.jdbc.postgresql.Queries
    description: "Insert deduplicated records into final table"
    url: jdbc:postgresql://pgdatabase:5432/polish_flat
    username: root
    password: root
    sql: |
      INSERT INTO {{ render(vars.table_name) }} (
        id, city, type, squareMeters, rooms, floor, floorCount, buildYear,
        latitude, longitude, centreDistance, poiCount, schoolDistance,
        clinicDistance, postOfficeDistance, kindergartenDistance, restaurantDistance,
        collegeDistance, pharmacyDistance, ownership, buildingMaterial, condition,
        hasParkingSpace, hasBalcony, hasElevator, hasSecurity, hasStorageRoom, price, unique_row_id
      )
      SELECT
        id, city, type, squareMeters, rooms, floor, floorCount, buildYear,
        latitude, longitude, centreDistance, poiCount, schoolDistance,
        clinicDistance, postOfficeDistance, kindergartenDistance, restaurantDistance,
        collegeDistance, pharmacyDistance, ownership, buildingMaterial, condition,
        hasParkingSpace, hasBalcony, hasElevator, hasSecurity, hasStorageRoom, price, unique_row_id
      FROM {{ render(vars.staging_table_name) }}
      ON CONFLICT (id) DO NOTHING;

  - id: count_rows_in_final
    type: io.kestra.plugin.jdbc.postgresql.Queries
    description: "Count rows in final table after import"
    url: jdbc:postgresql://pgdatabase:5432/polish_flat
    username: root
    password: root
    fetchType: FETCH
    sql: |
      SELECT COUNT(*) AS total_rows
      FROM {{ render(vars.table_name) }};

# Optional triggers to run automatically every month
# triggers:
#   - id: monthly_rent_trigger
#     type: io.kestra.plugin.core.trigger.Schedule
#     cron: "0 9 1 * *"
#     inputs:
#       data_type: rent
#   - id: monthly_sale_trigger
#     type: io.kestra.plugin.core.trigger.Schedule
#     cron: "0 10 1 * *"
#     inputs:
#       data_type: sale
